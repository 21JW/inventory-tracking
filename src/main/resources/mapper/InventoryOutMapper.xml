<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shopify.inventory.dao.InventoryOutDAO">

    <resultMap type="com.shopify.inventory.model.entity.InventoryOut" id="InventoryOutMap">
        <result property="id" column="id" jdbcType="VARCHAR"/>
        <result property="inventory_in_id" column="inventory_in_id" jdbcType="VARCHAR"/>
        <result property="num" column="num" jdbcType="NUMERIC"/>
        <result property="note" column="note" jdbcType="VARCHAR"/>
        <result property="created_time" column="created_time" jdbcType="TIMESTAMP"/>
        <result property="ts" column="ts" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="where">
        <where>
            <if test="eqWrapper != null">
                <foreach collection="eqWrapper.entrySet()" index="column" item="value">
                    <if test="column != null and value != null">
                        and `${column}` = #{value}
                    </if>
                </foreach>
            </if>
            <if test="neqWrapper != null">
                <foreach collection="neqWrapper.entrySet()" index="column" item="value">
                    <if test="column != null and value != null">
                        and `${column}` != #{value}
                    </if>
                </foreach>
            </if>
            <if test="inWrapper != null">
                <foreach collection="inWrapper.entrySet()" index="column" item="values">
                    <if test="values != null and values.size() > 0">
                        and `${column}` in
                        <foreach collection="values" item="value" open="(" separator="," close=")">
                            #{value}
                        </foreach>
                    </if>
                </foreach>
            </if>
            <if test="ninWrapper != null">
                <foreach collection="ninWrapper.entrySet()" index="column" item="values">
                    <if test="values != null and values.size() > 0">
                        and `${column}` not in
                        <foreach collection="values" item="value" open="(" separator="," close=")">
                            #{value}
                        </foreach>
                    </if>
                </foreach>
            </if>
            <if test="keyWrapper != null and keyWrapper.size() > 0">
                <foreach collection="keyWrapper.entrySet()" index="key" item="columns">
                    <if test="columns != null and columns.size() > 0">
                        and
                        <foreach collection="columns" item="column" open="(" separator=" or " close=")">
                            `${column}` like CONCAT('%',#{key},'%')
                        </foreach>
                    </if>
                </foreach>
            </if>
        </where>
    </sql>

    <select id="countWithQuery" resultType="int">
        select COUNT(*) from `inventory_out`
        <include refid="where"/>
    </select>

    <select id="selectWithQuery" resultMap="InventoryOutMap">
        select * from `inventory_out`
        <include refid="where"/>
        <if test="sortWrapper != null and sortWrapper.size() > 0">
            order by
            <foreach collection="sortWrapper.entrySet()" index="s" item="o" separator=",">
                `${s}` ${o}
            </foreach>
        </if>
        <if test="offset != null and limit != null">
            limit #{offset}, #{limit}
        </if>
    </select>

    <delete id="batchDelete" parameterType="list">
        delete from `inventory_out` where `id` in
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into `inventory_out`
        (`id`, `inventory_in_id`, `num`, `note`, `created_time`, `ts`)
        values
        (#{id}, #{inventory_in_id}, #{num}, #{note}, #{created_time}, #{ts})
    </insert>

    <update id="update">
        update inventory.inventory_out
        <set>
            <if test="note != null and note != ''">
                note = #{note},
            </if>
            <if test="ts != null">
                ts = #{ts},
            </if>
        </set>
        where id = #{id}
    </update>

    <select id="queryById" resultMap="InventoryOutMap">
        select * from `inventory_out` where `id` = #{id}
    </select>

    <select id="queryAll" resultMap="InventoryOutMap">
        select * from `inventory_out` order by ts desc
    </select>

</mapper>